const char *HashFactory_source =
"\n"
"/* Copyright (C) 1991-2012 Free Software Foundation, Inc.\n"
"   This file is part of the GNU C Library.\n"
"\n"
"   The GNU C Library is free software; you can redistribute it and/or\n"
"   modify it under the terms of the GNU Lesser General Public\n"
"   License as published by the Free Software Foundation; either\n"
"   version 2.1 of the License, or (at your option) any later version.\n"
"\n"
"   The GNU C Library is distributed in the hope that it will be useful,\n"
"   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n"
"   Lesser General Public License for more details.\n"
"\n"
"   You should have received a copy of the GNU Lesser General Public\n"
"   License along with the GNU C Library; if not, see\n"
"   <http://www.gnu.org/licenses/>.  */\n"
"/* This header is separate from features.h so that the compiler can\n"
"   include it implicitly at the start of every compilation.  It must\n"
"   not itself include <features.h> or any other header that includes\n"
"   <features.h> because the implicit include comes before any feature\n"
"   test macros that may be defined in a source file before it first\n"
"   explicitly includes a system header.  GCC knows the name of this\n"
"   header in order to preinclude it.  */\n"
"/* We do support the IEC 559 math functionality, real and complex.  */\n"
"/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /\n"
"   Unicode 6.0.  */\n"
"/* We do not support C11 <threads.h>.  */\n"
"/* Copyright 2013-14.  Los Alamos National Security, LLC. This material was produced\n"
" * under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National \n"
" * Laboratory (LANL), which is operated by Los Alamos National Security, LLC\n"
" * for the U.S. Department of Energy. The U.S. Government has rights to use,\n"
" * reproduce, and distribute this software.  NEITHER THE GOVERNMENT NOR LOS\n"
" * ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR\n"
" * ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  If software is modified\n"
" * to produce derivative works, such modified software should be clearly marked,\n"
" * so as not to confuse it with the version available from LANL.   \n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the ""License""); you may not\n"
" * use this file except in compliance with the License. You may obtain a copy\n"
" * of the License at \n"
" *\n"
" * http://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software distributed\n"
" * under the License is distributed on an ""AS IS"" BASIS, WITHOUT WARRANTIES OR\n"
" * CONDITIONS OF ANY KIND, either express or implied. See the License for the\n"
" * specific language governing permissions and limitations under the License.\n"
" *\n"
" * Under this license, it is required to include a reference to this work. We\n"
" * request that each derivative work contain a reference to LANL Copyright \n"
" * Disclosure C14043/LA-CC-14-003 so that this work's impact can be roughly\n"
" * measured. In addition, it is requested that a modifier is included as in\n"
" * the following example:\n"
" *\n"
" * //<Uses | improves on | modified from> LANL Copyright Disclosure C14043/LA-CC-14-003\n"
" *\n"
" * This is LANL Copyright Disclosure C14043/LA-CC-14-003\n"
" */\n"
"int intintIdentityPerfectCLHash_InsertSingle(__global char *tableData,\n"
"					     int key, int value);\n"
"int intintIdentityPerfectCLHash_InnerInsertSingle(__global char *tableData,\n"
"						  int key, int value);\n"
"int intintHash_InsertSingle(__global char *tableData, int key, int value);\n"
"int intintIdentityPerfectCLHash_InnerQuery(__global char *tableData,\n"
"					   unsigned int numKeys,\n"
"					   __global int *keys,\n"
"					   __global int *valuesOutput);\n"
"int intintIdentityPerfectCLHash_InnerQuerySingle(__global char *tableData,\n"
"						 int key,\n"
"						 __global int *valueOutput);\n"
"int intintIdentityPerfectCLHash_InnerInsert(__global char *tableData,\n"
"					    unsigned int numEntries,\n"
"					    __global int *keys,\n"
"					    __global int *values);\n"
"int intintIdentityPerfectCLHash_InnerInsertSingleNoOverwrite(__global char\n"
"							     *tableData,\n"
"							     int key,\n"
"							     int value);\n"
"int intintIdentityPerfectCLHash_InnerInsertNoOverwrite(__global char *tableData,\n"
"						       unsigned int numEntries,\n"
"						       __global int *keys,\n"
"						       __global int *values);\n"
"int intintIdentityPerfectCLHash_QuerySingle(__global char *tableData, int key,\n"
"					    __global int *valueOutput);\n"
"int intintIdentityPerfectCLHash_QuerySingle(__global char *tableData, int key,\n"
"					    __global int *valueOutput);\n"
"int intintIdentityPerfectCLHash_Query(__global char *tableData, size_t numKeys,\n"
"				      __global int *keys,\n"
"				      __global int *valuesOutput);\n"
"int intintIdentityPerfectCLHash_Insert(__global char *tableData,\n"
"				       size_t numEntries, __global int *keys,\n"
"				       __global int *values);\n"
"int intintIdentityPerfectCLHash_InsertSingleNoOverwrite(__global char\n"
"							*tableData, int key,\n"
"							int value);\n"
"int intintIdentityPerfectCLHash_InsertNoOverwrite(__global char *tableData,\n"
"						  size_t numEntries,\n"
"						  __global int *keys,\n"
"						  __global int *values);\n"
"int intintIdentitySentinelPerfectCLHash_InnerInsertNoOverwrite(__global char\n"
"							       *tableData,\n"
"							       unsigned int\n"
"							       numEntries,\n"
"							       __global int\n"
"							       *keys,\n"
"							       __global int\n"
"							       *values);\n"
"int intintIdentitySentinelPerfectCLHash_InnerQuerySingle(__global char\n"
"							 *tableData, int key,\n"
"							 __global int\n"
"							 *valueOutput);\n"
"int intintIdentitySentinelPerfectCLHash_InnerQuery(__global char *tableData,\n"
"						   unsigned int numKeys,\n"
"						   __global int *keys,\n"
"						   __global int *valuesOutput);\n"
"int intintIdentitySentinelPerfectCLHash_InnerInsertSingle(__global char\n"
"							  *tableData, int key,\n"
"							  int value);\n"
"int intintIdentitySentinelPerfectCLHash_InnerInsert(__global char *tableData,\n"
"						    unsigned int numEntries,\n"
"						    __global int *keys,\n"
"						    __global int *values);\n"
"int intintIdentitySentinelPerfectCLHash_InnerInsertSingleNoOverwrite(__global\n"
"								     char\n"
"								     *tableData,\n"
"								     int key,\n"
"								     int value);\n"
"int intintIdentitySentinelPerfectCLHash_QuerySingle(__global char *tableData,\n"
"						    int key,\n"
"						    __global int *valueOutput);\n"
"int intintIdentitySentinelPerfectCLHash_Query(__global char *tableData,\n"
"					      size_t numKeys,\n"
"					      __global int *keys,\n"
"					      __global int *valuesOutput);\n"
"int intintIdentitySentinelPerfectCLHash_InsertSingle(__global char *tableData,\n"
"						     int key, int value);\n"
"int intintIdentitySentinelPerfectCLHash_Insert(__global char *tableData,\n"
"					       size_t numEntries,\n"
"					       __global int *keys,\n"
"					       __global int *values);\n"
"int intintIdentitySentinelPerfectCLHash_InsertSingleNoOverwrite(__global char\n"
"								*tableData,\n"
"								int key,\n"
"								int value);\n"
"int intintIdentitySentinelPerfectCLHash_InsertNoOverwrite(__global char\n"
"							  *tableData,\n"
"							  size_t numEntries,\n"
"							  __global int *keys,\n"
"							  __global int *values);\n"
"int intintLCGLinearOpenCompactCLHash_InnerQuerySingle(__global char *tableData,\n"
"						      int key,\n"
"						      __global int\n"
"						      *valueOutput);\n"
"int intintLCGLinearOpenCompactCLHash_QuerySingle(__global char *tableData,\n"
"						 int key,\n"
"						 __global int *valueOutput);\n"
"int intintLCGLinearOpenCompactCLHash_Query(__global char *tableData,\n"
"					   size_t numKeys, __global int *keys,\n"
"					   __global int *valuesOutput);\n"
"int intintLCGLinearOpenCompactCLHash_InsertSingle(__global char *tableData,\n"
"						  int key, int value);\n"
"int intintLCGLinearOpenCompactCLHash_Insert(__global char *tableData,\n"
"					    size_t numEntries,\n"
"					    __global int *keys,\n"
"					    __global int *values);\n"
"int intintLCGLinearOpenCompactCLHash_InsertSingleNoOverwrite(__global char\n"
"							     *tableData,\n"
"							     int key,\n"
"							     int value);\n"
"int intintLCGLinearOpenCompactCLHash_InsertNoOverwrite(__global char *tableData,\n"
"						       size_t numEntries,\n"
"						       __global int *keys,\n"
"						       __global int *values);\n"
"int intintLCGLinearOpenCompactCLHash_InnerQuery(__global char *tableData,\n"
"						unsigned int numKeys,\n"
"						__global int *keys,\n"
"						__global int *valuesOutput);\n"
"int intintLCGLinearOpenCompactCLHash_InnerInsertNoOverwrite(__global char\n"
"							    *tableData,\n"
"							    unsigned int\n"
"							    numEntries,\n"
"							    __global int *keys,\n"
"							    __global int\n"
"							    *values);\n"
"int intintLCGLinearOpenCompactCLHash_InnerInsertSingle(__global char *tableData,\n"
"						       int key, int value);\n"
"int intintLCGLinearOpenCompactCLHash_InnerInsertSingleNoOverwrite(__global char\n"
"								  *tableData,\n"
"								  int key,\n"
"								  int value);\n"
"int intintLCGLinearOpenCompactCLHash_InnerInsert(__global char *tableData,\n"
"						 unsigned int numEntries,\n"
"						 __global int *keys,\n"
"						 __global int *values);\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerQuerySingle(__global char\n"
"							 *tableData, int key,\n"
"							 __global int\n"
"							 *valueOutput);\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerQuery(__global char *tableData,\n"
"						   unsigned int numKeys,\n"
"						   __global int *keys,\n"
"						   __global int *valuesOutput);\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerInsertSingle(__global char\n"
"							  *tableData, int key,\n"
"							  int value);\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerInsert(__global char *tableData,\n"
"						    unsigned int numEntries,\n"
"						    __global int *keys,\n"
"						    __global int *values);\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerInsertSingleNoOverwrite(__global\n"
"								     char\n"
"								     *tableData,\n"
"								     int key,\n"
"								     int value);\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerInsertNoOverwrite(__global char\n"
"							       *tableData,\n"
"							       unsigned int\n"
"							       numEntries,\n"
"							       __global int\n"
"							       *keys,\n"
"							       __global int\n"
"							       *values);\n"
"int intintLCGQuadraticOpenCompactCLHash_QuerySingle(__global char *tableData,\n"
"						    int key,\n"
"						    __global int *valueOutput);\n"
"int intintLCGQuadraticOpenCompactCLHash_Query(__global char *tableData,\n"
"					      size_t numKeys,\n"
"					      __global int *keys,\n"
"					      __global int *valuesOutput);\n"
"int intintLCGQuadraticOpenCompactCLHash_InsertSingle(__global char *tableData,\n"
"						     int key, int value);\n"
"int intintLCGQuadraticOpenCompactCLHash_Insert(__global char *tableData,\n"
"					       size_t numEntries,\n"
"					       __global int *keys,\n"
"					       __global int *values);\n"
"int intintLCGQuadraticOpenCompactCLHash_InsertSingleNoOverwrite(__global char\n"
"								*tableData,\n"
"								int key,\n"
"								int value);\n"
"int intintLCGQuadraticOpenCompactCLHash_InsertNoOverwrite(__global char\n"
"							  *tableData,\n"
"							  size_t numEntries,\n"
"							  __global int *keys,\n"
"							  __global int *values);\n"
"int intintHash_Query(__global char *tableData, unsigned int numKeys,\n"
"		     __global int *keys, __global int *valuesOutput);\n"
"int intintHash_QuerySingle(__global char *tableData, int key,\n"
"			   __global int *valueOutput);\n"
"int intintHash_Insert(__global char *tableData, unsigned int numEntries,\n"
"		      __global int *keys, __global int *values);\n"
"int intintHash_InsertNoOverwrite(__global char *tableData,\n"
"				 unsigned int numEntries, __global int *keys,\n"
"				 __global int *values);\n"
"int intintHash_InsertSingleNoOverwrite(__global char *tableData, int key,\n"
"				       int value);\n"
"#define HASH_REPORT_NEVER /**/ 0\n"
"#define HASH_REPORT_CYCLE /**/ 1\n"
"#define HASH_REPORT_END /****/ 2\n"
"//\n"
"#define HASH_EXIT_CODE_NORMAL /****************/ -1\n"
"#define HASH_EXIT_CODE_ERROR /*****************/ -2\n"
"#define HASH_EXIT_CODE_OVERWRITE /*************/ -3\n"
"#define HASH_EXIT_CODE_KEY_DNE /***************/ -4\n"
"#define HASH_EXIT_CODE_CYCLE /*****************/ -5\n"
"#define HASH_EXIT_CODE_MAX_ENTRIES_EXCEEDED /**/ -6\n"
"#define HASH_EXIT_CODE_BUCKET_INDEX_OOB /******/ -7\n"
"//\n"
"#define HASH_SEARCH_CODE_MATCH /*****/ 0\n"
"#define HASH_SEARCH_CODE_MISMATCH /**/ 1\n"
"#define HASH_SEARCH_CODE_EMPTY /*****/ 2\n"
"//\n"
"#define IDENTITY_PERFECT_CL_HASH_ID /****************/ 16\n"
"#define IDENTITY_SENTINEL_PERFECT_CL_HASH_ID /*******/ 32\n"
"#define LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID /*********/ 64\n"
"#define LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID /******/ 128\n"
"//\n"
"#define HASH_BUCKET_STATUS_EMPTY /**/ -1\n"
"#define HASH_BUCKET_STATUS_FULL /***/ -2\n"
"#define HASH_BUCKET_STATUS_LOCK /***/ -3\n"
"static inline unsigned int intintHash_CompressIdentity(char data, int hashCode) {\n"
"	return hashCode;\n"
"}\n"
"\n"
"typedef struct intintHash_CompressLCGData {\n"
"	long unsigned int a;\n"
"	long unsigned int c;\n"
"	unsigned int m;\n"
"	unsigned int n;\n"
"} intintHash_CompressLCGData;\n"
"static inline unsigned int intintHash_CompressLCG(intintHash_CompressLCGData\n"
"						  compressLCGData,\n"
"						  int hashCode) {\n"
"	return ((compressLCGData.a * hashCode +\n"
"		 compressLCGData.c) % compressLCGData.m) % compressLCGData.n;\n"
"}\n"
"\n"
"typedef struct intintIdentityPerfectCLHash_TableData {\n"
"	int hashID;\n"
"	unsigned int numBuckets;\n"
"	char compressFuncData;\n"
"} intintIdentityPerfectCLHash_TableData;\n"
"typedef struct intintIdentityPerfectCLHash_Bucket {\n"
"	int key;\n"
"	int value;\n"
"} intintIdentityPerfectCLHash_Bucket;\n"
"int intintIdentityPerfectCLHash_InnerQuerySingle(__global char *tableData,\n"
"						 int key,\n"
"						 __global int *valueOutput) {\n"
"	__global intintIdentityPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentityPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentityPerfectCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	index =\n"
"	    intintHash_CompressIdentity(((__global\n"
"					  intintIdentityPerfectCLHash_TableData\n"
"					  *) tableData)->compressFuncData, key);\n"
"	if ((buckets[index].key) != HASH_BUCKET_STATUS_EMPTY) {\n"
"		if (key == buckets[index].key) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"		} else {\n"
"			exitCode = HASH_SEARCH_CODE_MISMATCH;\n"
"		}\n"
"	} else {\n"
"		exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"		*valueOutput = buckets[index].value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		return HASH_EXIT_CODE_KEY_DNE;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintIdentityPerfectCLHash_InnerQuery(__global char *tableData,\n"
"					   unsigned int numKeys,\n"
"					   __global int *keys,\n"
"					   __global int *valuesOutput) {\n"
"	__global intintIdentityPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentityPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentityPerfectCLHash_TableData)];\n"
"	int key;\n"
"	__global int *valueOutput;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	for (i = 0; i < numKeys; i++) {\n"
"		key = keys[i];\n"
"		valueOutput = &valuesOutput[i];\n"
"		index =\n"
"		    intintHash_CompressIdentity(((__global\n"
"						  intintIdentityPerfectCLHash_TableData\n"
"						  *) tableData)->\n"
"						compressFuncData, key);\n"
"		if ((buckets[index].key) != HASH_BUCKET_STATUS_EMPTY) {\n"
"			if (key == buckets[index].key) {\n"
"				exitCode = HASH_SEARCH_CODE_MATCH;\n"
"			} else {\n"
"				exitCode = HASH_SEARCH_CODE_MISMATCH;\n"
"			}\n"
"		} else {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"			*valueOutput = buckets[index].value;\n"
"			break;\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			resultExitCode = HASH_EXIT_CODE_KEY_DNE;\n"
"			break;\n"
"		default:\n"
"			return exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintIdentityPerfectCLHash_InnerInsertSingle(__global char *tableData,\n"
"						  int key, int value) {\n"
"	__global intintIdentityPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentityPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentityPerfectCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	index =\n"
"	    intintHash_CompressIdentity(((__global\n"
"					  intintIdentityPerfectCLHash_TableData\n"
"					  *) tableData)->compressFuncData, key);\n"
"	if (((buckets[index].key ==\n"
"	      HASH_BUCKET_STATUS_EMPTY) ? (buckets[index].key =\n"
"					   key,\n"
"					   HASH_BUCKET_STATUS_EMPTY) :\n"
"	     buckets[index].key) != HASH_BUCKET_STATUS_EMPTY) {\n"
"		if (key == buckets[index].key) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"		} else {\n"
"			exitCode = HASH_SEARCH_CODE_MISMATCH;\n"
"		}\n"
"	} else {\n"
"		exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_OVERWRITE;\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintIdentityPerfectCLHash_InnerInsert(__global char *tableData,\n"
"					    unsigned int numEntries,\n"
"					    __global int *keys,\n"
"					    __global int *values) {\n"
"	__global intintIdentityPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentityPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentityPerfectCLHash_TableData)];\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	int key;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;;\n"
"	for (i = 0; i < numEntries; i++) {\n"
"		key = keys[i];\n"
"		index =\n"
"		    intintHash_CompressIdentity(((__global\n"
"						  intintIdentityPerfectCLHash_TableData\n"
"						  *) tableData)->\n"
"						compressFuncData, key);\n"
"		if (((buckets[index].key ==\n"
"		      HASH_BUCKET_STATUS_EMPTY) ? (buckets[index].key =\n"
"						   key,\n"
"						   HASH_BUCKET_STATUS_EMPTY) :\n"
"		     buckets[index].key) != HASH_BUCKET_STATUS_EMPTY) {\n"
"			if (key == buckets[index].key) {\n"
"				exitCode = HASH_SEARCH_CODE_MATCH;\n"
"			} else {\n"
"				exitCode = HASH_SEARCH_CODE_MISMATCH;\n"
"			}\n"
"		} else {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"			resultExitCode = HASH_EXIT_CODE_OVERWRITE;\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			buckets[index].value = values[i];\n"
"			break;\n"
"		default:\n"
"			resultExitCode = exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintIdentityPerfectCLHash_InnerInsertSingleNoOverwrite(__global char\n"
"							     *tableData,\n"
"							     int key,\n"
"							     int value) {\n"
"	__global intintIdentityPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentityPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentityPerfectCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	index =\n"
"	    intintHash_CompressIdentity(((__global\n"
"					  intintIdentityPerfectCLHash_TableData\n"
"					  *) tableData)->compressFuncData, key);\n"
"	if (((buckets[index].key ==\n"
"	      HASH_BUCKET_STATUS_EMPTY) ? (buckets[index].key =\n"
"					   key,\n"
"					   HASH_BUCKET_STATUS_EMPTY) :\n"
"	     buckets[index].key) != HASH_BUCKET_STATUS_EMPTY) {\n"
"		if (key == buckets[index].key) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"		} else {\n"
"			exitCode = HASH_SEARCH_CODE_MISMATCH;\n"
"		}\n"
"	} else {\n"
"		exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"		return HASH_EXIT_CODE_OVERWRITE;\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintIdentityPerfectCLHash_InnerInsertNoOverwrite(__global char *tableData,\n"
"						       unsigned int numEntries,\n"
"						       __global int *keys,\n"
"						       __global int *values) {\n"
"	__global intintIdentityPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentityPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentityPerfectCLHash_TableData)];\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	int key;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;;\n"
"	for (i = 0; i < numEntries; i++) {\n"
"		key = keys[i];\n"
"		index =\n"
"		    intintHash_CompressIdentity(((__global\n"
"						  intintIdentityPerfectCLHash_TableData\n"
"						  *) tableData)->\n"
"						compressFuncData, key);\n"
"		if (((buckets[index].key ==\n"
"		      HASH_BUCKET_STATUS_EMPTY) ? (buckets[index].key =\n"
"						   key,\n"
"						   HASH_BUCKET_STATUS_EMPTY) :\n"
"		     buckets[index].key) != HASH_BUCKET_STATUS_EMPTY) {\n"
"			if (key == buckets[index].key) {\n"
"				exitCode = HASH_SEARCH_CODE_MATCH;\n"
"			} else {\n"
"				exitCode = HASH_SEARCH_CODE_MISMATCH;\n"
"			}\n"
"		} else {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"			resultExitCode = HASH_EXIT_CODE_OVERWRITE;\n"
"			break;\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			buckets[index].value = values[i];\n"
"			break;\n"
"		default:\n"
"			resultExitCode = exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintIdentityPerfectCLHash_QuerySingle(__global char *tableData, int key,\n"
"					    __global int *valueOutput) {\n"
"	return intintIdentityPerfectCLHash_InnerQuerySingle(tableData, key,\n"
"							    valueOutput);\n"
"}\n"
"int intintIdentityPerfectCLHash_Query(__global char *tableData, size_t numKeys,\n"
"				      __global int *keys,\n"
"				      __global int *valuesOutput) {\n"
"	return intintIdentityPerfectCLHash_InnerQuery(tableData, numKeys, keys,\n"
"						      valuesOutput);\n"
"}\n"
"int intintIdentityPerfectCLHash_InsertSingle(__global char *tableData, int key,\n"
"					     int value) {\n"
"	return intintIdentityPerfectCLHash_InnerInsertSingle(tableData, key,\n"
"							     value);\n"
"}\n"
"int intintIdentityPerfectCLHash_Insert(__global char *tableData,\n"
"				       size_t numEntries, __global int *keys,\n"
"				       __global int *values) {\n"
"	return intintIdentityPerfectCLHash_InnerInsert(tableData, numEntries,\n"
"						       keys, values);\n"
"}\n"
"int intintIdentityPerfectCLHash_InsertSingleNoOverwrite(__global char\n"
"							*tableData, int key,\n"
"							int value) {\n"
"	return\n"
"	    intintIdentityPerfectCLHash_InnerInsertSingleNoOverwrite(tableData,\n"
"								     key,\n"
"								     value);\n"
"}\n"
"int intintIdentityPerfectCLHash_InsertNoOverwrite(__global char *tableData,\n"
"						  size_t numEntries,\n"
"						  __global int *keys,\n"
"						  __global int *values) {\n"
"	return intintIdentityPerfectCLHash_InnerInsertNoOverwrite(tableData,\n"
"								  numEntries,\n"
"								  keys, values);\n"
"}\n"
"__kernel void intintIdentityPerfectCLHash_RangeQuerySingle(__global char\n"
"							   *tableData,\n"
"							   unsigned int\n"
"							   numQueries,\n"
"							   __global int *keys,\n"
"							   __global int\n"
"							   *valuesOutput) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numQueries) {\n"
"		return;\n"
"	}\n"
"	intintIdentityPerfectCLHash_InnerQuerySingle(tableData, keys[i],\n"
"						     valuesOutput + i);\n"
"}\n"
"__kernel void intintIdentityPerfectCLHash_RangeQuery(__global char *tableData,\n"
"						     unsigned int numQueries,\n"
"						     unsigned int numKeys,\n"
"						     __global int *keys,\n"
"						     __global int\n"
"						     *valuesOutput) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numQueries) {\n"
"		return;\n"
"	}\n"
"	intintIdentityPerfectCLHash_InnerQuery(tableData, numKeys,\n"
"					       keys + (i * numKeys),\n"
"					       valuesOutput + (i * numKeys));\n"
"}\n"
"__kernel void intintIdentityPerfectCLHash_RangeInsertSingle(__global char\n"
"							    *tableData,\n"
"							    unsigned int\n"
"							    numInsertions,\n"
"							    __global int *keys,\n"
"							    __global int\n"
"							    *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintIdentityPerfectCLHash_InnerInsertSingle(tableData, keys[i],\n"
"						      values[i]);\n"
"}\n"
"__kernel void intintIdentityPerfectCLHash_RangeInsert(__global char *tableData,\n"
"						      unsigned int\n"
"						      numInsertions,\n"
"						      unsigned int numEntries,\n"
"						      __global int *keys,\n"
"						      __global int *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintIdentityPerfectCLHash_InnerInsert(tableData, numEntries,\n"
"						keys + (i * numEntries),\n"
"						values + (i * numEntries));\n"
"}\n"
"__kernel void intintIdentityPerfectCLHash_RangeInsertSingleNoOverwrite(__global\n"
"								       char\n"
"								       *tableData,\n"
"								       unsigned\n"
"								       int\n"
"								       numInsertions,\n"
"								       __global\n"
"								       int\n"
"								       *keys,\n"
"								       __global\n"
"								       int\n"
"								       *values) \n"
"{\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintIdentityPerfectCLHash_InnerInsertSingleNoOverwrite(tableData,\n"
"								 keys[i],\n"
"								 values[i]);\n"
"}\n"
"__kernel void intintIdentityPerfectCLHash_RangeInsertNoOverwrite(__global char\n"
"								 *tableData,\n"
"								 unsigned int\n"
"								 numInsertions,\n"
"								 unsigned int\n"
"								 numEntries,\n"
"								 __global int\n"
"								 *keys,\n"
"								 __global int\n"
"								 *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintIdentityPerfectCLHash_InnerInsertNoOverwrite(tableData,\n"
"							   numEntries,\n"
"							   keys +\n"
"							   (i * numEntries),\n"
"							   values +\n"
"							   (i * numEntries));\n"
"}\n"
"\n"
"typedef struct intintIdentitySentinelPerfectCLHash_TableData {\n"
"	int hashID;\n"
"	unsigned int numBuckets;\n"
"	char compressFuncData;\n"
"	int emptyValue;\n"
"} intintIdentitySentinelPerfectCLHash_TableData;\n"
"typedef struct intintIdentitySentinelPerfectCLHash_Bucket {\n"
"	int value;\n"
"} intintIdentitySentinelPerfectCLHash_Bucket;\n"
"int intintIdentitySentinelPerfectCLHash_InnerQuerySingle(__global char\n"
"							 *tableData, int key,\n"
"							 __global int\n"
"							 *valueOutput) {\n"
"	__global intintIdentitySentinelPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentitySentinelPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentitySentinelPerfectCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	index =\n"
"	    intintHash_CompressIdentity(((__global\n"
"					  intintIdentitySentinelPerfectCLHash_TableData\n"
"					  *) tableData)->compressFuncData, key);\n"
"	if (buckets[index].value !=\n"
"	    ((__global intintIdentitySentinelPerfectCLHash_TableData *)\n"
"	     tableData)->emptyValue) {\n"
"		exitCode = HASH_SEARCH_CODE_MATCH;\n"
"	} else {\n"
"		exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"		*valueOutput = buckets[index].value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		return HASH_EXIT_CODE_KEY_DNE;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_InnerQuery(__global char *tableData,\n"
"						   unsigned int numKeys,\n"
"						   __global int *keys,\n"
"						   __global int *valuesOutput) {\n"
"	__global intintIdentitySentinelPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentitySentinelPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentitySentinelPerfectCLHash_TableData)];\n"
"	int key;\n"
"	__global int *valueOutput;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	for (i = 0; i < numKeys; i++) {\n"
"		key = keys[i];\n"
"		valueOutput = &valuesOutput[i];\n"
"		index =\n"
"		    intintHash_CompressIdentity(((__global\n"
"						  intintIdentitySentinelPerfectCLHash_TableData\n"
"						  *) tableData)->\n"
"						compressFuncData, key);\n"
"		if (buckets[index].value !=\n"
"		    ((__global intintIdentitySentinelPerfectCLHash_TableData *)\n"
"		     tableData)->emptyValue) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"		} else {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"			*valueOutput = buckets[index].value;\n"
"			break;\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			resultExitCode = HASH_EXIT_CODE_KEY_DNE;\n"
"			break;\n"
"		default:\n"
"			return exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_InnerInsertSingle(__global char\n"
"							  *tableData, int key,\n"
"							  int value) {\n"
"	__global intintIdentitySentinelPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentitySentinelPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentitySentinelPerfectCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	index =\n"
"	    intintHash_CompressIdentity(((__global\n"
"					  intintIdentitySentinelPerfectCLHash_TableData\n"
"					  *) tableData)->compressFuncData, key);\n"
"	if (buckets[index].value !=\n"
"	    ((__global intintIdentitySentinelPerfectCLHash_TableData *)\n"
"	     tableData)->emptyValue) {\n"
"		exitCode = HASH_SEARCH_CODE_MATCH;\n"
"	} else {\n"
"		exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_OVERWRITE;\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_InnerInsert(__global char *tableData,\n"
"						    unsigned int numEntries,\n"
"						    __global int *keys,\n"
"						    __global int *values) {\n"
"	__global intintIdentitySentinelPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentitySentinelPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentitySentinelPerfectCLHash_TableData)];\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	int key;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;;\n"
"	for (i = 0; i < numEntries; i++) {\n"
"		key = keys[i];\n"
"		index =\n"
"		    intintHash_CompressIdentity(((__global\n"
"						  intintIdentitySentinelPerfectCLHash_TableData\n"
"						  *) tableData)->\n"
"						compressFuncData, key);\n"
"		if (buckets[index].value !=\n"
"		    ((__global intintIdentitySentinelPerfectCLHash_TableData *)\n"
"		     tableData)->emptyValue) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"		} else {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"			resultExitCode = HASH_EXIT_CODE_OVERWRITE;\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			buckets[index].value = values[i];\n"
"			break;\n"
"		default:\n"
"			resultExitCode = exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_InnerInsertSingleNoOverwrite(__global\n"
"								     char\n"
"								     *tableData,\n"
"								     int key,\n"
"								     int value) \n"
"{\n"
"	__global intintIdentitySentinelPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentitySentinelPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentitySentinelPerfectCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	index =\n"
"	    intintHash_CompressIdentity(((__global\n"
"					  intintIdentitySentinelPerfectCLHash_TableData\n"
"					  *) tableData)->compressFuncData, key);\n"
"	if (buckets[index].value !=\n"
"	    ((__global intintIdentitySentinelPerfectCLHash_TableData *)\n"
"	     tableData)->emptyValue) {\n"
"		exitCode = HASH_SEARCH_CODE_MATCH;\n"
"	} else {\n"
"		exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"		return HASH_EXIT_CODE_OVERWRITE;\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_InnerInsertNoOverwrite(__global char\n"
"							       *tableData,\n"
"							       unsigned int\n"
"							       numEntries,\n"
"							       __global int\n"
"							       *keys,\n"
"							       __global int\n"
"							       *values) {\n"
"	__global intintIdentitySentinelPerfectCLHash_Bucket *buckets =\n"
"	    (__global intintIdentitySentinelPerfectCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintIdentitySentinelPerfectCLHash_TableData)];\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	int key;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;;\n"
"	for (i = 0; i < numEntries; i++) {\n"
"		key = keys[i];\n"
"		index =\n"
"		    intintHash_CompressIdentity(((__global\n"
"						  intintIdentitySentinelPerfectCLHash_TableData\n"
"						  *) tableData)->\n"
"						compressFuncData, key);\n"
"		if (buckets[index].value !=\n"
"		    ((__global intintIdentitySentinelPerfectCLHash_TableData *)\n"
"		     tableData)->emptyValue) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"		} else {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"			resultExitCode = HASH_EXIT_CODE_OVERWRITE;\n"
"			break;\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			buckets[index].value = values[i];\n"
"			break;\n"
"		default:\n"
"			resultExitCode = exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_QuerySingle(__global char *tableData,\n"
"						    int key,\n"
"						    __global int *valueOutput) {\n"
"	return intintIdentitySentinelPerfectCLHash_InnerQuerySingle(tableData,\n"
"								    key,\n"
"								    valueOutput);\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_Query(__global char *tableData,\n"
"					      size_t numKeys,\n"
"					      __global int *keys,\n"
"					      __global int *valuesOutput) {\n"
"	return intintIdentitySentinelPerfectCLHash_InnerQuery(tableData,\n"
"							      numKeys, keys,\n"
"							      valuesOutput);\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_InsertSingle(__global char *tableData,\n"
"						     int key, int value) {\n"
"	return intintIdentitySentinelPerfectCLHash_InnerInsertSingle(tableData,\n"
"								     key,\n"
"								     value);\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_Insert(__global char *tableData,\n"
"					       size_t numEntries,\n"
"					       __global int *keys,\n"
"					       __global int *values) {\n"
"	return intintIdentitySentinelPerfectCLHash_InnerInsert(tableData,\n"
"							       numEntries, keys,\n"
"							       values);\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_InsertSingleNoOverwrite(__global char\n"
"								*tableData,\n"
"								int key,\n"
"								int value) {\n"
"	return\n"
"	    intintIdentitySentinelPerfectCLHash_InnerInsertSingleNoOverwrite\n"
"	    (tableData, key, value);\n"
"}\n"
"int intintIdentitySentinelPerfectCLHash_InsertNoOverwrite(__global char\n"
"							  *tableData,\n"
"							  size_t numEntries,\n"
"							  __global int *keys,\n"
"							  __global int *values) \n"
"{\n"
"	return\n"
"	    intintIdentitySentinelPerfectCLHash_InnerInsertNoOverwrite\n"
"	    (tableData, numEntries, keys, values);\n"
"}\n"
"__kernel void intintIdentitySentinelPerfectCLHash_RangeQuerySingle(__global char\n"
"								   *tableData,\n"
"								   unsigned int\n"
"								   numQueries,\n"
"								   __global int\n"
"								   *keys,\n"
"								   __global int\n"
"								   *valuesOutput) \n"
"{\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numQueries) {\n"
"		return;\n"
"	}\n"
"	intintIdentitySentinelPerfectCLHash_InnerQuerySingle(tableData, keys[i],\n"
"							     valuesOutput + i);\n"
"}\n"
"__kernel void intintIdentitySentinelPerfectCLHash_RangeQuery(__global char\n"
"							     *tableData,\n"
"							     unsigned int\n"
"							     numQueries,\n"
"							     unsigned int\n"
"							     numKeys,\n"
"							     __global int *keys,\n"
"							     __global int\n"
"							     *valuesOutput) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numQueries) {\n"
"		return;\n"
"	}\n"
"	intintIdentitySentinelPerfectCLHash_InnerQuery(tableData, numKeys,\n"
"						       keys + (i * numKeys),\n"
"						       valuesOutput +\n"
"						       (i * numKeys));\n"
"}\n"
"__kernel void intintIdentitySentinelPerfectCLHash_RangeInsertSingle(__global\n"
"								    char\n"
"								    *tableData,\n"
"								    unsigned int\n"
"								    numInsertions,\n"
"								    __global int\n"
"								    *keys,\n"
"								    __global int\n"
"								    *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintIdentitySentinelPerfectCLHash_InnerInsertSingle(tableData,\n"
"							      keys[i],\n"
"							      values[i]);\n"
"}\n"
"__kernel void intintIdentitySentinelPerfectCLHash_RangeInsert(__global char\n"
"							      *tableData,\n"
"							      unsigned int\n"
"							      numInsertions,\n"
"							      unsigned int\n"
"							      numEntries,\n"
"							      __global int\n"
"							      *keys,\n"
"							      __global int\n"
"							      *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintIdentitySentinelPerfectCLHash_InnerInsert(tableData, numEntries,\n"
"							keys + (i * numEntries),\n"
"							values +\n"
"							(i * numEntries));\n"
"}\n"
"__kernel void\n"
"intintIdentitySentinelPerfectCLHash_RangeInsertSingleNoOverwrite(__global char\n"
"								 *tableData,\n"
"								 unsigned int\n"
"								 numInsertions,\n"
"								 __global int\n"
"								 *keys,\n"
"								 __global int\n"
"								 *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintIdentitySentinelPerfectCLHash_InnerInsertSingleNoOverwrite\n"
"	    (tableData, keys[i], values[i]);\n"
"}\n"
"__kernel void\n"
"intintIdentitySentinelPerfectCLHash_RangeInsertNoOverwrite(__global char\n"
"							   *tableData,\n"
"							   unsigned int\n"
"							   numInsertions,\n"
"							   unsigned int\n"
"							   numEntries,\n"
"							   __global int *keys,\n"
"							   __global int\n"
"							   *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintIdentitySentinelPerfectCLHash_InnerInsertNoOverwrite(tableData,\n"
"								   numEntries,\n"
"								   keys +\n"
"								   (i *\n"
"								    numEntries),\n"
"								   values +\n"
"								   (i *\n"
"								    numEntries));\n"
"}\n"
"\n"
"typedef struct intintLCGLinearOpenCompactCLHash_TableData {\n"
"	int hashID;\n"
"	unsigned int numBuckets;\n"
"	intintHash_CompressLCGData compressFuncData;\n"
"} intintLCGLinearOpenCompactCLHash_TableData;\n"
"typedef struct intintLCGLinearOpenCompactCLHash_Bucket {\n"
"	int key;\n"
"	int value;\n"
"} intintLCGLinearOpenCompactCLHash_Bucket;\n"
"int intintLCGLinearOpenCompactCLHash_InnerQuerySingle(__global char *tableData,\n"
"						      int key,\n"
"						      __global int\n"
"						      *valueOutput) {\n"
"	__global intintLCGLinearOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGLinearOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGLinearOpenCompactCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	__global intintLCGLinearOpenCompactCLHash_TableData *mytableData =\n"
"	    (__global intintLCGLinearOpenCompactCLHash_TableData *) tableData;\n"
"	intintHash_CompressLCGData compressFuncData =\n"
"	    mytableData->compressFuncData;\n"
"	unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"	unsigned long int iteration = 0;\n"
"	for (;;) {\n"
"		index =\n"
"		    ((1 * iteration +\n"
"		      c) %\n"
"		     ((__global intintLCGLinearOpenCompactCLHash_TableData *)\n"
"		      tableData)->numBuckets);\n"
"		if ((buckets[index].key) == HASH_BUCKET_STATUS_EMPTY) {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"			break;\n"
"		} else if (key == buckets[index].key) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"			break;\n"
"		} else if ((index == c && iteration > 0)) {\n"
"			exitCode = HASH_EXIT_CODE_CYCLE;\n"
"			break;\n"
"		}\n"
"		iteration++;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"		*valueOutput = buckets[index].value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		return HASH_EXIT_CODE_KEY_DNE;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_InnerQuery(__global char *tableData,\n"
"						unsigned int numKeys,\n"
"						__global int *keys,\n"
"						__global int *valuesOutput) {\n"
"	__global intintLCGLinearOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGLinearOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGLinearOpenCompactCLHash_TableData)];\n"
"	int key;\n"
"	__global int *valueOutput;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	for (i = 0; i < numKeys; i++) {\n"
"		key = keys[i];\n"
"		valueOutput = &valuesOutput[i];\n"
"		__global intintLCGLinearOpenCompactCLHash_TableData *mytableData\n"
"		    =\n"
"		    (__global intintLCGLinearOpenCompactCLHash_TableData *)\n"
"		    tableData;\n"
"		intintHash_CompressLCGData compressFuncData =\n"
"		    mytableData->compressFuncData;\n"
"		unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"		unsigned long int iteration = 0;\n"
"		for (;;) {\n"
"			index =\n"
"			    ((1 * iteration +\n"
"			      c) %\n"
"			     ((__global\n"
"			       intintLCGLinearOpenCompactCLHash_TableData *)\n"
"			      tableData)->numBuckets);\n"
"			if ((buckets[index].key) == HASH_BUCKET_STATUS_EMPTY) {\n"
"				exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"				break;\n"
"			} else if (key == buckets[index].key) {\n"
"				exitCode = HASH_SEARCH_CODE_MATCH;\n"
"				break;\n"
"			} else if ((index == c && iteration > 0)) {\n"
"				exitCode = HASH_EXIT_CODE_CYCLE;\n"
"				break;\n"
"			}\n"
"			iteration++;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"			*valueOutput = buckets[index].value;\n"
"			break;\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			resultExitCode = HASH_EXIT_CODE_KEY_DNE;\n"
"			break;\n"
"		default:\n"
"			return exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_InnerInsertSingle(__global char *tableData,\n"
"						       int key, int value) {\n"
"	__global intintLCGLinearOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGLinearOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGLinearOpenCompactCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	__global intintLCGLinearOpenCompactCLHash_TableData *mytableData =\n"
"	    (__global intintLCGLinearOpenCompactCLHash_TableData *) tableData;\n"
"	intintHash_CompressLCGData compressFuncData =\n"
"	    mytableData->compressFuncData;\n"
"	unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"	unsigned long int iteration = 0;\n"
"	for (;;) {\n"
"		index =\n"
"		    ((1 * iteration +\n"
"		      c) %\n"
"		     ((__global intintLCGLinearOpenCompactCLHash_TableData *)\n"
"		      tableData)->numBuckets);\n"
"		if ((atomic_cmpxchg\n"
"		     (&(buckets[index].key), HASH_BUCKET_STATUS_EMPTY,\n"
"		      key)) == HASH_BUCKET_STATUS_EMPTY) {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"			break;\n"
"		} else if (key == buckets[index].key) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"			break;\n"
"		} else if ((index == c && iteration > 0)) {\n"
"			exitCode = HASH_EXIT_CODE_CYCLE;\n"
"			break;\n"
"		}\n"
"		iteration++;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_OVERWRITE;\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_InnerInsert(__global char *tableData,\n"
"						 unsigned int numEntries,\n"
"						 __global int *keys,\n"
"						 __global int *values) {\n"
"	__global intintLCGLinearOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGLinearOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGLinearOpenCompactCLHash_TableData)];\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	int key;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;;\n"
"	for (i = 0; i < numEntries; i++) {\n"
"		key = keys[i];\n"
"		__global intintLCGLinearOpenCompactCLHash_TableData *mytableData\n"
"		    =\n"
"		    (__global intintLCGLinearOpenCompactCLHash_TableData *)\n"
"		    tableData;\n"
"		intintHash_CompressLCGData compressFuncData =\n"
"		    mytableData->compressFuncData;\n"
"		unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"		unsigned long int iteration = 0;\n"
"		for (;;) {\n"
"			index =\n"
"			    ((1 * iteration +\n"
"			      c) %\n"
"			     ((__global\n"
"			       intintLCGLinearOpenCompactCLHash_TableData *)\n"
"			      tableData)->numBuckets);\n"
"			if ((atomic_cmpxchg\n"
"			     (&(buckets[index].key), HASH_BUCKET_STATUS_EMPTY,\n"
"			      key)) == HASH_BUCKET_STATUS_EMPTY) {\n"
"				exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"				break;\n"
"			} else if (key == buckets[index].key) {\n"
"				exitCode = HASH_SEARCH_CODE_MATCH;\n"
"				break;\n"
"			} else if ((index == c && iteration > 0)) {\n"
"				exitCode = HASH_EXIT_CODE_CYCLE;\n"
"				break;\n"
"			}\n"
"			iteration++;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"			resultExitCode = HASH_EXIT_CODE_OVERWRITE;\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			buckets[index].value = values[i];\n"
"			break;\n"
"		default:\n"
"			resultExitCode = exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_InnerInsertSingleNoOverwrite(__global char\n"
"								  *tableData,\n"
"								  int key,\n"
"								  int value) {\n"
"	__global intintLCGLinearOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGLinearOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGLinearOpenCompactCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	__global intintLCGLinearOpenCompactCLHash_TableData *mytableData =\n"
"	    (__global intintLCGLinearOpenCompactCLHash_TableData *) tableData;\n"
"	intintHash_CompressLCGData compressFuncData =\n"
"	    mytableData->compressFuncData;\n"
"	unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"	unsigned long int iteration = 0;\n"
"	for (;;) {\n"
"		index =\n"
"		    ((1 * iteration +\n"
"		      c) %\n"
"		     ((__global intintLCGLinearOpenCompactCLHash_TableData *)\n"
"		      tableData)->numBuckets);\n"
"		if ((atomic_cmpxchg\n"
"		     (&(buckets[index].key), HASH_BUCKET_STATUS_EMPTY,\n"
"		      key)) == HASH_BUCKET_STATUS_EMPTY) {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"			break;\n"
"		} else if (key == buckets[index].key) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"			break;\n"
"		} else if ((index == c && iteration > 0)) {\n"
"			exitCode = HASH_EXIT_CODE_CYCLE;\n"
"			break;\n"
"		}\n"
"		iteration++;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"		return HASH_EXIT_CODE_OVERWRITE;\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_InnerInsertNoOverwrite(__global char\n"
"							    *tableData,\n"
"							    unsigned int\n"
"							    numEntries,\n"
"							    __global int *keys,\n"
"							    __global int\n"
"							    *values) {\n"
"	__global intintLCGLinearOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGLinearOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGLinearOpenCompactCLHash_TableData)];\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	int key;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;;\n"
"	for (i = 0; i < numEntries; i++) {\n"
"		key = keys[i];\n"
"		__global intintLCGLinearOpenCompactCLHash_TableData *mytableData\n"
"		    =\n"
"		    (__global intintLCGLinearOpenCompactCLHash_TableData *)\n"
"		    tableData;\n"
"		intintHash_CompressLCGData compressFuncData =\n"
"		    mytableData->compressFuncData;\n"
"		unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"		unsigned long int iteration = 0;\n"
"		for (;;) {\n"
"			index =\n"
"			    ((1 * iteration +\n"
"			      c) %\n"
"			     ((__global\n"
"			       intintLCGLinearOpenCompactCLHash_TableData *)\n"
"			      tableData)->numBuckets);\n"
"			if ((atomic_cmpxchg\n"
"			     (&(buckets[index].key), HASH_BUCKET_STATUS_EMPTY,\n"
"			      key)) == HASH_BUCKET_STATUS_EMPTY) {\n"
"				exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"				break;\n"
"			} else if (key == buckets[index].key) {\n"
"				exitCode = HASH_SEARCH_CODE_MATCH;\n"
"				break;\n"
"			} else if ((index == c && iteration > 0)) {\n"
"				exitCode = HASH_EXIT_CODE_CYCLE;\n"
"				break;\n"
"			}\n"
"			iteration++;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"			resultExitCode = HASH_EXIT_CODE_OVERWRITE;\n"
"			break;\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			buckets[index].value = values[i];\n"
"			break;\n"
"		default:\n"
"			resultExitCode = exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_QuerySingle(__global char *tableData,\n"
"						 int key,\n"
"						 __global int *valueOutput) {\n"
"	return intintLCGLinearOpenCompactCLHash_InnerQuerySingle(tableData, key,\n"
"								 valueOutput);\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_Query(__global char *tableData,\n"
"					   size_t numKeys, __global int *keys,\n"
"					   __global int *valuesOutput) {\n"
"	return intintLCGLinearOpenCompactCLHash_InnerQuery(tableData, numKeys,\n"
"							   keys, valuesOutput);\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_InsertSingle(__global char *tableData,\n"
"						  int key, int value) {\n"
"	return intintLCGLinearOpenCompactCLHash_InnerInsertSingle(tableData,\n"
"								  key, value);\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_Insert(__global char *tableData,\n"
"					    size_t numEntries,\n"
"					    __global int *keys,\n"
"					    __global int *values) {\n"
"	return intintLCGLinearOpenCompactCLHash_InnerInsert(tableData,\n"
"							    numEntries, keys,\n"
"							    values);\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_InsertSingleNoOverwrite(__global char\n"
"							     *tableData,\n"
"							     int key,\n"
"							     int value) {\n"
"	return\n"
"	    intintLCGLinearOpenCompactCLHash_InnerInsertSingleNoOverwrite\n"
"	    (tableData, key, value);\n"
"}\n"
"int intintLCGLinearOpenCompactCLHash_InsertNoOverwrite(__global char *tableData,\n"
"						       size_t numEntries,\n"
"						       __global int *keys,\n"
"						       __global int *values) {\n"
"	return\n"
"	    intintLCGLinearOpenCompactCLHash_InnerInsertNoOverwrite(tableData,\n"
"								    numEntries,\n"
"								    keys,\n"
"								    values);\n"
"}\n"
"__kernel void intintLCGLinearOpenCompactCLHash_RangeQuerySingle(__global char\n"
"								*tableData,\n"
"								unsigned int\n"
"								numQueries,\n"
"								__global int\n"
"								*keys,\n"
"								__global int\n"
"								*valuesOutput) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numQueries) {\n"
"		return;\n"
"	}\n"
"	intintLCGLinearOpenCompactCLHash_InnerQuerySingle(tableData, keys[i],\n"
"							  valuesOutput + i);\n"
"}\n"
"__kernel void intintLCGLinearOpenCompactCLHash_RangeQuery(__global char\n"
"							  *tableData,\n"
"							  unsigned int\n"
"							  numQueries,\n"
"							  unsigned int numKeys,\n"
"							  __global int *keys,\n"
"							  __global int\n"
"							  *valuesOutput) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numQueries) {\n"
"		return;\n"
"	}\n"
"	intintLCGLinearOpenCompactCLHash_InnerQuery(tableData, numKeys,\n"
"						    keys + (i * numKeys),\n"
"						    valuesOutput +\n"
"						    (i * numKeys));\n"
"}\n"
"__kernel void intintLCGLinearOpenCompactCLHash_RangeInsertSingle(__global char\n"
"								 *tableData,\n"
"								 unsigned int\n"
"								 numInsertions,\n"
"								 __global int\n"
"								 *keys,\n"
"								 __global int\n"
"								 *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintLCGLinearOpenCompactCLHash_InnerInsertSingle(tableData, keys[i],\n"
"							   values[i]);\n"
"}\n"
"__kernel void intintLCGLinearOpenCompactCLHash_RangeInsert(__global char\n"
"							   *tableData,\n"
"							   unsigned int\n"
"							   numInsertions,\n"
"							   unsigned int\n"
"							   numEntries,\n"
"							   __global int *keys,\n"
"							   __global int\n"
"							   *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintLCGLinearOpenCompactCLHash_InnerInsert(tableData, numEntries,\n"
"						     keys + (i * numEntries),\n"
"						     values + (i * numEntries));\n"
"}\n"
"__kernel void\n"
"intintLCGLinearOpenCompactCLHash_RangeInsertSingleNoOverwrite(__global char\n"
"							      *tableData,\n"
"							      unsigned int\n"
"							      numInsertions,\n"
"							      __global int\n"
"							      *keys,\n"
"							      __global int\n"
"							      *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintLCGLinearOpenCompactCLHash_InnerInsertSingleNoOverwrite(tableData,\n"
"								      keys[i],\n"
"								      values\n"
"								      [i]);\n"
"}\n"
"__kernel void intintLCGLinearOpenCompactCLHash_RangeInsertNoOverwrite(__global\n"
"								      char\n"
"								      *tableData,\n"
"								      unsigned\n"
"								      int\n"
"								      numInsertions,\n"
"								      unsigned\n"
"								      int\n"
"								      numEntries,\n"
"								      __global\n"
"								      int *keys,\n"
"								      __global\n"
"								      int\n"
"								      *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintLCGLinearOpenCompactCLHash_InnerInsertNoOverwrite(tableData,\n"
"								numEntries,\n"
"								keys +\n"
"								(i *\n"
"								 numEntries),\n"
"								values +\n"
"								(i *\n"
"								 numEntries));\n"
"}\n"
"\n"
"typedef struct intintLCGQuadraticOpenCompactCLHash_TableData {\n"
"	int hashID;\n"
"	unsigned int numBuckets;\n"
"	intintHash_CompressLCGData compressFuncData;\n"
"} intintLCGQuadraticOpenCompactCLHash_TableData;\n"
"typedef struct intintLCGQuadraticOpenCompactCLHash_Bucket {\n"
"	int key;\n"
"	int value;\n"
"} intintLCGQuadraticOpenCompactCLHash_Bucket;\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerQuerySingle(__global char\n"
"							 *tableData, int key,\n"
"							 __global int\n"
"							 *valueOutput) {\n"
"	__global intintLCGQuadraticOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGQuadraticOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGQuadraticOpenCompactCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	__global intintLCGQuadraticOpenCompactCLHash_TableData *mytableData =\n"
"	    (__global intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"	    tableData;\n"
"	intintHash_CompressLCGData compressFuncData =\n"
"	    mytableData->compressFuncData;\n"
"	unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"	unsigned long int iteration = 0;\n"
"	for (;;) {\n"
"		index =\n"
"		    ((1 * iteration * iteration + 0 * iteration +\n"
"		      c) %\n"
"		     ((intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"		      tableData)->numBuckets);\n"
"		if ((buckets[index].key) == HASH_BUCKET_STATUS_EMPTY) {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"			break;\n"
"		} else if (key == buckets[index].key) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"			break;\n"
"		} else\n"
"		    if ((iteration >\n"
"			 ((intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"			  tableData)->numBuckets)) {\n"
"			exitCode = HASH_EXIT_CODE_CYCLE;\n"
"			break;\n"
"		}\n"
"		iteration++;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"		*valueOutput = buckets[index].value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		return HASH_EXIT_CODE_KEY_DNE;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerQuery(__global char *tableData,\n"
"						   unsigned int numKeys,\n"
"						   __global int *keys,\n"
"						   __global int *valuesOutput) {\n"
"	__global intintLCGQuadraticOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGQuadraticOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGQuadraticOpenCompactCLHash_TableData)];\n"
"	int key;\n"
"	__global int *valueOutput;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	for (i = 0; i < numKeys; i++) {\n"
"		key = keys[i];\n"
"		valueOutput = &valuesOutput[i];\n"
"		__global intintLCGQuadraticOpenCompactCLHash_TableData\n"
"		    *mytableData =\n"
"		    (__global intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"		    tableData;\n"
"		intintHash_CompressLCGData compressFuncData =\n"
"		    mytableData->compressFuncData;\n"
"		unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"		unsigned long int iteration = 0;\n"
"		for (;;) {\n"
"			index =\n"
"			    ((1 * iteration * iteration + 0 * iteration +\n"
"			      c) %\n"
"			     ((__global\n"
"			       intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"			      tableData)->numBuckets);\n"
"			if ((buckets[index].key) == HASH_BUCKET_STATUS_EMPTY) {\n"
"				exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"				break;\n"
"			} else if (key == buckets[index].key) {\n"
"				exitCode = HASH_SEARCH_CODE_MATCH;\n"
"				break;\n"
"			} else\n"
"			    if ((iteration >\n"
"				 ((__global\n"
"				   intintLCGQuadraticOpenCompactCLHash_TableData\n"
"				   *) tableData)->numBuckets)) {\n"
"				exitCode = HASH_EXIT_CODE_CYCLE;\n"
"				break;\n"
"			}\n"
"			iteration++;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"			*valueOutput = buckets[index].value;\n"
"			break;\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			resultExitCode = HASH_EXIT_CODE_KEY_DNE;\n"
"			break;\n"
"		default:\n"
"			return exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerInsertSingle(__global char\n"
"							  *tableData, int key,\n"
"							  int value) {\n"
"	__global intintLCGQuadraticOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGQuadraticOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGQuadraticOpenCompactCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	__global intintLCGQuadraticOpenCompactCLHash_TableData *mytableData =\n"
"	    (__global intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"	    tableData;\n"
"	intintHash_CompressLCGData compressFuncData =\n"
"	    mytableData->compressFuncData;\n"
"	unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"	unsigned long int iteration = 0;\n"
"	for (;;) {\n"
"		index =\n"
"		    ((1 * iteration * iteration + 0 * iteration +\n"
"		      c) %\n"
"		     ((__global intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"		      tableData)->numBuckets);\n"
"		if ((atomic_cmpxchg\n"
"		     (&(buckets[index].key), HASH_BUCKET_STATUS_EMPTY,\n"
"		      key)) == HASH_BUCKET_STATUS_EMPTY) {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"			break;\n"
"		} else if (key == buckets[index].key) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"			break;\n"
"		} else\n"
"		    if ((iteration >\n"
"			 ((__global\n"
"			   intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"			  tableData)->numBuckets)) {\n"
"			exitCode = HASH_EXIT_CODE_CYCLE;\n"
"			break;\n"
"		}\n"
"		iteration++;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_OVERWRITE;\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerInsert(__global char *tableData,\n"
"						    unsigned int numEntries,\n"
"						    __global int *keys,\n"
"						    __global int *values) {\n"
"	__global intintLCGQuadraticOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGQuadraticOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGQuadraticOpenCompactCLHash_TableData)];\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	int key;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;;\n"
"	for (i = 0; i < numEntries; i++) {\n"
"		key = keys[i];\n"
"		__global intintLCGQuadraticOpenCompactCLHash_TableData\n"
"		    *mytableData =\n"
"		    (__global intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"		    tableData;\n"
"		intintHash_CompressLCGData compressFuncData =\n"
"		    mytableData->compressFuncData;\n"
"		unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"		unsigned long int iteration = 0;\n"
"		for (;;) {\n"
"			index =\n"
"			    ((1 * iteration * iteration + 0 * iteration +\n"
"			      c) %\n"
"			     ((__global\n"
"			       intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"			      tableData)->numBuckets);\n"
"			if ((atomic_cmpxchg\n"
"			     (&(buckets[index].key), HASH_BUCKET_STATUS_EMPTY,\n"
"			      key)) == HASH_BUCKET_STATUS_EMPTY) {\n"
"				exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"				break;\n"
"			} else if (key == buckets[index].key) {\n"
"				exitCode = HASH_SEARCH_CODE_MATCH;\n"
"				break;\n"
"			} else\n"
"			    if ((iteration >\n"
"				 ((__global\n"
"				   intintLCGQuadraticOpenCompactCLHash_TableData\n"
"				   *) tableData)->numBuckets)) {\n"
"				exitCode = HASH_EXIT_CODE_CYCLE;\n"
"				break;\n"
"			}\n"
"			iteration++;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"			resultExitCode = HASH_EXIT_CODE_OVERWRITE;\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			buckets[index].value = values[i];\n"
"			break;\n"
"		default:\n"
"			resultExitCode = exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerInsertSingleNoOverwrite(__global\n"
"								     char\n"
"								     *tableData,\n"
"								     int key,\n"
"								     int value) \n"
"{\n"
"	__global intintLCGQuadraticOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGQuadraticOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGQuadraticOpenCompactCLHash_TableData)];\n"
"	int index;\n"
"	int exitCode;\n"
"	__global intintLCGQuadraticOpenCompactCLHash_TableData *mytableData =\n"
"	    (__global intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"	    tableData;\n"
"	intintHash_CompressLCGData compressFuncData =\n"
"	    mytableData->compressFuncData;\n"
"	unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"	unsigned long int iteration = 0;\n"
"	for (;;) {\n"
"		index =\n"
"		    ((1 * iteration * iteration + 0 * iteration +\n"
"		      c) %\n"
"		     ((__global intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"		      tableData)->numBuckets);\n"
"		if ((atomic_cmpxchg\n"
"		     (&(buckets[index].key), HASH_BUCKET_STATUS_EMPTY,\n"
"		      key)) == HASH_BUCKET_STATUS_EMPTY) {\n"
"			exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"			break;\n"
"		} else if (key == buckets[index].key) {\n"
"			exitCode = HASH_SEARCH_CODE_MATCH;\n"
"			break;\n"
"		} else\n"
"		    if ((iteration >\n"
"			 ((__global\n"
"			   intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"			  tableData)->numBuckets)) {\n"
"			exitCode = HASH_EXIT_CODE_CYCLE;\n"
"			break;\n"
"		}\n"
"		iteration++;\n"
"	}\n"
"	switch (exitCode) {\n"
"	case HASH_SEARCH_CODE_MATCH:\n"
"	case HASH_SEARCH_CODE_MISMATCH:\n"
"		return HASH_EXIT_CODE_OVERWRITE;\n"
"	case HASH_SEARCH_CODE_EMPTY:\n"
"		buckets[index].value = value;\n"
"		return HASH_EXIT_CODE_NORMAL;\n"
"	default:\n"
"		return exitCode;\n"
"	}\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_InnerInsertNoOverwrite(__global char\n"
"							       *tableData,\n"
"							       unsigned int\n"
"							       numEntries,\n"
"							       __global int\n"
"							       *keys,\n"
"							       __global int\n"
"							       *values) {\n"
"	__global intintLCGQuadraticOpenCompactCLHash_Bucket *buckets =\n"
"	    (__global intintLCGQuadraticOpenCompactCLHash_Bucket *) &\n"
"	    tableData[sizeof(intintLCGQuadraticOpenCompactCLHash_TableData)];\n"
"	int resultExitCode = HASH_EXIT_CODE_NORMAL;\n"
"	int key;\n"
"	int index;\n"
"	int exitCode;\n"
"	uint i;;\n"
"	for (i = 0; i < numEntries; i++) {\n"
"		key = keys[i];\n"
"		__global intintLCGQuadraticOpenCompactCLHash_TableData\n"
"		    *mytableData =\n"
"		    (__global intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"		    tableData;\n"
"		intintHash_CompressLCGData compressFuncData =\n"
"		    mytableData->compressFuncData;\n"
"		unsigned int c = intintHash_CompressLCG(compressFuncData, key);\n"
"		unsigned long int iteration = 0;\n"
"		for (;;) {\n"
"			index =\n"
"			    ((1 * iteration * iteration + 0 * iteration +\n"
"			      c) %\n"
"			     ((__global\n"
"			       intintLCGQuadraticOpenCompactCLHash_TableData *)\n"
"			      tableData)->numBuckets);\n"
"			if ((atomic_cmpxchg\n"
"			     (&(buckets[index].key), HASH_BUCKET_STATUS_EMPTY,\n"
"			      key)) == HASH_BUCKET_STATUS_EMPTY) {\n"
"				exitCode = HASH_SEARCH_CODE_EMPTY;\n"
"				break;\n"
"			} else if (key == buckets[index].key) {\n"
"				exitCode = HASH_SEARCH_CODE_MATCH;\n"
"				break;\n"
"			} else\n"
"			    if ((iteration >\n"
"				 ((__global\n"
"				   intintLCGQuadraticOpenCompactCLHash_TableData\n"
"				   *) tableData)->numBuckets)) {\n"
"				exitCode = HASH_EXIT_CODE_CYCLE;\n"
"				break;\n"
"			}\n"
"			iteration++;\n"
"		}\n"
"		switch (exitCode) {\n"
"		case HASH_SEARCH_CODE_MATCH:\n"
"		case HASH_SEARCH_CODE_MISMATCH:\n"
"			resultExitCode = HASH_EXIT_CODE_OVERWRITE;\n"
"			break;\n"
"		case HASH_SEARCH_CODE_EMPTY:\n"
"			buckets[index].value = values[i];\n"
"			break;\n"
"		default:\n"
"			resultExitCode = exitCode;\n"
"		}\n"
"	}\n"
"	return resultExitCode;\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_QuerySingle(__global char *tableData,\n"
"						    int key,\n"
"						    __global int *valueOutput) {\n"
"	return intintLCGQuadraticOpenCompactCLHash_InnerQuerySingle(tableData,\n"
"								    key,\n"
"								    valueOutput);\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_Query(__global char *tableData,\n"
"					      size_t numKeys,\n"
"					      __global int *keys,\n"
"					      __global int *valuesOutput) {\n"
"	return intintLCGQuadraticOpenCompactCLHash_InnerQuery(tableData,\n"
"							      numKeys, keys,\n"
"							      valuesOutput);\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_InsertSingle(__global char *tableData,\n"
"						     int key, int value) {\n"
"	return intintLCGQuadraticOpenCompactCLHash_InnerInsertSingle(tableData,\n"
"								     key,\n"
"								     value);\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_Insert(__global char *tableData,\n"
"					       size_t numEntries,\n"
"					       __global int *keys,\n"
"					       __global int *values) {\n"
"	return intintLCGQuadraticOpenCompactCLHash_InnerInsert(tableData,\n"
"							       numEntries, keys,\n"
"							       values);\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_InsertSingleNoOverwrite(__global char\n"
"								*tableData,\n"
"								int key,\n"
"								int value) {\n"
"	return\n"
"	    intintLCGQuadraticOpenCompactCLHash_InnerInsertSingleNoOverwrite\n"
"	    (tableData, key, value);\n"
"}\n"
"int intintLCGQuadraticOpenCompactCLHash_InsertNoOverwrite(__global char\n"
"							  *tableData,\n"
"							  size_t numEntries,\n"
"							  __global int *keys,\n"
"							  __global int *values) \n"
"{\n"
"	return\n"
"	    intintLCGQuadraticOpenCompactCLHash_InnerInsertNoOverwrite\n"
"	    (tableData, numEntries, keys, values);\n"
"}\n"
"__kernel void intintLCGQuadraticOpenCompactCLHash_RangeQuerySingle(__global char\n"
"								   *tableData,\n"
"								   unsigned int\n"
"								   numQueries,\n"
"								   __global int\n"
"								   *keys,\n"
"								   __global int\n"
"								   *valuesOutput) \n"
"{\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numQueries) {\n"
"		return;\n"
"	}\n"
"	intintLCGQuadraticOpenCompactCLHash_InnerQuerySingle(tableData, keys[i],\n"
"							     valuesOutput + i);\n"
"}\n"
"__kernel void intintLCGQuadraticOpenCompactCLHash_RangeQuery(__global char\n"
"							     *tableData,\n"
"							     unsigned int\n"
"							     numQueries,\n"
"							     unsigned int\n"
"							     numKeys,\n"
"							     __global int *keys,\n"
"							     __global int\n"
"							     *valuesOutput) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numQueries) {\n"
"		return;\n"
"	}\n"
"	intintLCGQuadraticOpenCompactCLHash_InnerQuery(tableData, numKeys,\n"
"						       keys + (i * numKeys),\n"
"						       valuesOutput +\n"
"						       (i * numKeys));\n"
"}\n"
"__kernel void intintLCGQuadraticOpenCompactCLHash_RangeInsertSingle(__global\n"
"								    char\n"
"								    *tableData,\n"
"								    unsigned int\n"
"								    numInsertions,\n"
"								    __global int\n"
"								    *keys,\n"
"								    __global int\n"
"								    *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintLCGQuadraticOpenCompactCLHash_InnerInsertSingle(tableData,\n"
"							      keys[i],\n"
"							      values[i]);\n"
"}\n"
"__kernel void intintLCGQuadraticOpenCompactCLHash_RangeInsert(__global char\n"
"							      *tableData,\n"
"							      unsigned int\n"
"							      numInsertions,\n"
"							      unsigned int\n"
"							      numEntries,\n"
"							      __global int\n"
"							      *keys,\n"
"							      __global int\n"
"							      *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintLCGQuadraticOpenCompactCLHash_InnerInsert(tableData, numEntries,\n"
"							keys + (i * numEntries),\n"
"							values +\n"
"							(i * numEntries));\n"
"}\n"
"__kernel void\n"
"intintLCGQuadraticOpenCompactCLHash_RangeInsertSingleNoOverwrite(__global char\n"
"								 *tableData,\n"
"								 unsigned int\n"
"								 numInsertions,\n"
"								 __global int\n"
"								 *keys,\n"
"								 __global int\n"
"								 *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintLCGQuadraticOpenCompactCLHash_InnerInsertSingleNoOverwrite\n"
"	    (tableData, keys[i], values[i]);\n"
"}\n"
"__kernel void\n"
"intintLCGQuadraticOpenCompactCLHash_RangeInsertNoOverwrite(__global char\n"
"							   *tableData,\n"
"							   unsigned int\n"
"							   numInsertions,\n"
"							   unsigned int\n"
"							   numEntries,\n"
"							   __global int *keys,\n"
"							   __global int\n"
"							   *values) {\n"
"	uint i = get_global_id(0);\n"
"	if (i >= numInsertions) {\n"
"		return;\n"
"	}\n"
"	intintLCGQuadraticOpenCompactCLHash_InnerInsertNoOverwrite(tableData,\n"
"								   numEntries,\n"
"								   keys +\n"
"								   (i *\n"
"								    numEntries),\n"
"								   values +\n"
"								   (i *\n"
"								    numEntries));\n"
"}\n"
"__kernel void intintHash_RangeQuery(__global char *tableData,\n"
"				    unsigned int numQueries,\n"
"				    unsigned int numKeys, __global int *keys,\n"
"				    __global int *valuesOutput) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return intintIdentityPerfectCLHash_RangeQuery(tableData,\n"
"							      numQueries,\n"
"							      numKeys, keys,\n"
"							      valuesOutput);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return intintIdentitySentinelPerfectCLHash_RangeQuery(tableData,\n"
"								      numQueries,\n"
"								      numKeys,\n"
"								      keys,\n"
"								      valuesOutput);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return intintLCGLinearOpenCompactCLHash_RangeQuery(tableData,\n"
"								   numQueries,\n"
"								   numKeys,\n"
"								   keys,\n"
"								   valuesOutput);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return intintLCGQuadraticOpenCompactCLHash_RangeQuery(tableData,\n"
"								      numQueries,\n"
"								      numKeys,\n"
"								      keys,\n"
"								      valuesOutput);\n"
"	}\n"
"}\n"
"__kernel void intintHash_RangeQuerySingle(__global char *tableData,\n"
"					  unsigned int numQueries,\n"
"					  __global int *keys,\n"
"					  __global int *valueOutput) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return intintIdentityPerfectCLHash_RangeQuerySingle(tableData,\n"
"								    numQueries,\n"
"								    keys,\n"
"								    valueOutput);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentitySentinelPerfectCLHash_RangeQuerySingle\n"
"		    (tableData, numQueries, keys, valueOutput);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGLinearOpenCompactCLHash_RangeQuerySingle(tableData,\n"
"								      numQueries,\n"
"								      keys,\n"
"								      valueOutput);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGQuadraticOpenCompactCLHash_RangeQuerySingle\n"
"		    (tableData, numQueries, keys, valueOutput);\n"
"	}\n"
"}\n"
"__kernel void intintHash_RangeInsert(__global char *tableData,\n"
"				     unsigned int numInsertions,\n"
"				     unsigned int numEntries,\n"
"				     __global int *keys, __global int *values) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return intintIdentityPerfectCLHash_RangeInsert(tableData,\n"
"							       numInsertions,\n"
"							       numEntries, keys,\n"
"							       values);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentitySentinelPerfectCLHash_RangeInsert(tableData,\n"
"								    numInsertions,\n"
"								    numEntries,\n"
"								    keys,\n"
"								    values);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return intintLCGLinearOpenCompactCLHash_RangeInsert(tableData,\n"
"								    numInsertions,\n"
"								    numEntries,\n"
"								    keys,\n"
"								    values);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGQuadraticOpenCompactCLHash_RangeInsert(tableData,\n"
"								    numInsertions,\n"
"								    numEntries,\n"
"								    keys,\n"
"								    values);\n"
"	}\n"
"}\n"
"__kernel void intintHash_RangeInsertSingle(__global char *tableData,\n"
"					   unsigned int numInsertions,\n"
"					   __global int *keys,\n"
"					   __global int *values) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return intintIdentityPerfectCLHash_RangeInsertSingle(tableData,\n"
"								     numInsertions,\n"
"								     keys,\n"
"								     values);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentitySentinelPerfectCLHash_RangeInsertSingle\n"
"		    (tableData, numInsertions, keys, values);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGLinearOpenCompactCLHash_RangeInsertSingle\n"
"		    (tableData, numInsertions, keys, values);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGQuadraticOpenCompactCLHash_RangeInsertSingle\n"
"		    (tableData, numInsertions, keys, values);\n"
"	}\n"
"}\n"
"__kernel void intintHash_RangeInsertNoOverwrite(__global char *tableData,\n"
"						unsigned int numInsertions,\n"
"						unsigned int numEntries,\n"
"						__global int *keys,\n"
"						__global int *values) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentityPerfectCLHash_RangeInsertNoOverwrite\n"
"		    (tableData, numInsertions, numEntries, keys, values);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentitySentinelPerfectCLHash_RangeInsertNoOverwrite\n"
"		    (tableData, numInsertions, numEntries, keys, values);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGLinearOpenCompactCLHash_RangeInsertNoOverwrite\n"
"		    (tableData, numInsertions, numEntries, keys, values);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGQuadraticOpenCompactCLHash_RangeInsertNoOverwrite\n"
"		    (tableData, numInsertions, numEntries, keys, values);\n"
"	}\n"
"}\n"
"__kernel void intintHash_RangeInsertSingleNoOverwrite(__global char *tableData,\n"
"						      unsigned int\n"
"						      numInsertions,\n"
"						      __global int *keys,\n"
"						      __global int *values) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentityPerfectCLHash_RangeInsertSingleNoOverwrite\n"
"		    (tableData, numInsertions, keys, values);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentitySentinelPerfectCLHash_RangeInsertSingleNoOverwrite\n"
"		    (tableData, numInsertions, keys, values);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGLinearOpenCompactCLHash_RangeInsertSingleNoOverwrite\n"
"		    (tableData, numInsertions, keys, values);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGQuadraticOpenCompactCLHash_RangeInsertSingleNoOverwrite\n"
"		    (tableData, numInsertions, keys, values);\n"
"	}\n"
"}\n"
"int intintHash_Query(__global char *tableData, unsigned int numKeys,\n"
"		     __global int *keys, __global int *valuesOutput) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return intintIdentityPerfectCLHash_Query(tableData, numKeys,\n"
"							 keys, valuesOutput);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return intintIdentitySentinelPerfectCLHash_Query(tableData,\n"
"								 numKeys, keys,\n"
"								 valuesOutput);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return intintLCGLinearOpenCompactCLHash_Query(tableData,\n"
"							      numKeys, keys,\n"
"							      valuesOutput);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return intintLCGQuadraticOpenCompactCLHash_Query(tableData,\n"
"								 numKeys, keys,\n"
"								 valuesOutput);\n"
"	}\n"
"	return HASH_EXIT_CODE_ERROR;\n"
"}\n"
"int intintHash_QuerySingle(__global char *tableData, int key,\n"
"			   __global int *valueOutput) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return intintIdentityPerfectCLHash_QuerySingle(tableData, key,\n"
"							       valueOutput);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentitySentinelPerfectCLHash_QuerySingle(tableData,\n"
"								    key,\n"
"								    valueOutput);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return intintLCGLinearOpenCompactCLHash_QuerySingle(tableData,\n"
"								    key,\n"
"								    valueOutput);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGQuadraticOpenCompactCLHash_QuerySingle(tableData,\n"
"								    key,\n"
"								    valueOutput);\n"
"	}\n"
"	return HASH_EXIT_CODE_ERROR;\n"
"}\n"
"int intintHash_Insert(__global char *tableData, unsigned int numEntries,\n"
"		      __global int *keys, __global int *values) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return intintIdentityPerfectCLHash_Insert(tableData, numEntries,\n"
"							  keys, values);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return intintIdentitySentinelPerfectCLHash_Insert(tableData,\n"
"								  numEntries,\n"
"								  keys, values);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return intintLCGLinearOpenCompactCLHash_Insert(tableData,\n"
"							       numEntries, keys,\n"
"							       values);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return intintLCGQuadraticOpenCompactCLHash_Insert(tableData,\n"
"								  numEntries,\n"
"								  keys, values);\n"
"	}\n"
"	return HASH_EXIT_CODE_ERROR;\n"
"}\n"
"int intintHash_InsertSingle(__global char *tableData, int key, int value) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return intintIdentityPerfectCLHash_InsertSingle(tableData, key,\n"
"								value);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentitySentinelPerfectCLHash_InsertSingle(tableData,\n"
"								     key,\n"
"								     value);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return intintLCGLinearOpenCompactCLHash_InsertSingle(tableData,\n"
"								     key,\n"
"								     value);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGQuadraticOpenCompactCLHash_InsertSingle(tableData,\n"
"								     key,\n"
"								     value);\n"
"	}\n"
"	return HASH_EXIT_CODE_ERROR;\n"
"}\n"
"int intintHash_InsertNoOverwrite(__global char *tableData,\n"
"				 unsigned int numEntries, __global int *keys,\n"
"				 __global int *values) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return intintIdentityPerfectCLHash_InsertNoOverwrite(tableData,\n"
"								     numEntries,\n"
"								     keys,\n"
"								     values);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentitySentinelPerfectCLHash_InsertNoOverwrite\n"
"		    (tableData, numEntries, keys, values);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGLinearOpenCompactCLHash_InsertNoOverwrite\n"
"		    (tableData, numEntries, keys, values);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGQuadraticOpenCompactCLHash_InsertNoOverwrite\n"
"		    (tableData, numEntries, keys, values);\n"
"	}\n"
"	return HASH_EXIT_CODE_ERROR;\n"
"}\n"
"int intintHash_InsertSingleNoOverwrite(__global char *tableData, int key,\n"
"				       int value) {\n"
"	switch (((__global int *)tableData)[0]) {\n"
"	case IDENTITY_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentityPerfectCLHash_InsertSingleNoOverwrite\n"
"		    (tableData, key, value);\n"
"	case IDENTITY_SENTINEL_PERFECT_CL_HASH_ID:\n"
"		return\n"
"		    intintIdentitySentinelPerfectCLHash_InsertSingleNoOverwrite\n"
"		    (tableData, key, value);\n"
"	case LCG_LINEAR_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGLinearOpenCompactCLHash_InsertSingleNoOverwrite\n"
"		    (tableData, key, value);\n"
"	case LCG_QUADRATIC_OPEN_COMPACT_CL_HASH_ID:\n"
"		return\n"
"		    intintLCGQuadraticOpenCompactCLHash_InsertSingleNoOverwrite\n"
"		    (tableData, key, value);\n"
"	}\n"
"	return HASH_EXIT_CODE_ERROR;\n"
"}\n"
;
